---
import Layout from "../../layouts/BlogPost.astro";
import { cmsBlog } from "../../library/microcms";
import pkg from "microcms-richedit-processer";
const { createTableOfContents, processer } = pkg;

import { load } from "cheerio";
import hljs, { HighlightResult } from "highlight.js";
import "highlight.js/styles/hybrid.css";

// 生成する記事のIDを全て取得
export async function getStaticPaths() {
  const response = await cmsBlog.getBlogs({ orders: "-publishedAt" });
  return response.contents.map((content: any) => ({
    params: {
      blogId: content.id,
    },
    props: {
      blog: content,
    },
  }));
}

//記事の詳細情報を取得
const { blogId } = Astro.params;
const { blog } = Astro.props;
// const blog = await getBlogDetail(blogId as string);
// 記事を発行日降順でIDとタイトルを取得
const posts = await cmsBlog.getBlogs({
  fields: ["id", "title"],
  orders: "-publishedAt",
});

// APIから取得したリッチエディタのHTMLからcheerioオブジェクトを生成
const $ = load(blog.content);

// コードブロックのファイル名が入力されている場合の処理
$("div[data-filename]").each((_, elm) => {
  // data-filename属性の値を持つspanを
  // <div data-filename="{入力したファイル名}">の最初の子要素として追加
  $(elm).prepend(
    `<span class="filename">${$(elm).attr("data-filename")}</span>`
  );
});

// コードブロックのシンタックスハイライトを行う
$("pre code").each((_, elm) => {
  const language = $(elm).attr("class") || "";
  let result: HighlightResult;

  if (language == "") {
    // 言語が入力なしの場合、自動判定
    result = hljs.highlightAuto($(elm).text());
  } else {
    // 言語が入力ありの場合、入力された言語で判定
    result = hljs.highlight($(elm).text(), {
      language: language.replace("language-", ""),
    });
  }
  $(elm).html(result.value);
  $(elm).addClass("hljs");
});

const lcp = "";

$("img").each((index, elm) => {
  const src = $(elm).attr("src");
  if (src && src.includes("https://images.microcms-assets.io/assets/")) {
    // クエリパラメータを削除
    const srcWithoutQuery = src.split("?")[0];
    // fm=webp パラメータ
    const webpQueryParam = "?fm=webp";
    // classにlazyloadを追加
    $(elm).addClass("lazyload");
    // srcを削除
    $(elm).removeAttr("src");
    // data-srcを設定
    $(elm).attr("data-src", srcWithoutQuery + webpQueryParam);
    // data-srcsetを設定
    $(elm).attr("data-srcset",`${srcWithoutQuery+webpQueryParam}&w=640 640w, ${srcWithoutQuery+webpQueryParam}&w=750 750w, ${srcWithoutQuery+webpQueryParam}&w=828 828w, ${srcWithoutQuery+webpQueryParam}&w=1080 1080w, ${srcWithoutQuery+webpQueryParam}&w=1200 1200w, ${srcWithoutQuery+webpQueryParam}&w=1920 1920w, ${srcWithoutQuery+webpQueryParam}&w=2048 2048w, ${srcWithoutQuery+webpQueryParam}&w=3840 3840w`);
    $(elm).attr("data-sizes","100vw");
    if(index===0){
      $(elm).attr("loading","eager");
      lcp = srcWithoutQuery;
    }else{
      $(elm).attr("loading","lazy");
    }
  }
});

$("iframe").each((index, elm) => {
  $(elm).addClass("lazyload");
});

// 編集したHTMLを再設定
blog.content = $.html();

// const content = processer(blog.content, { img: { parameters: { fm: "webp"} } });
const content = blog.content;
const table_of_content = createTableOfContents(blog.content, {
  tags: "h1,h2,h3,h4,h5",
});

// 現在の記事のpostsの中でのindex番号を取得
const current_index = posts.contents.findIndex((post) => post.id === blogId);
// 1つ新しい記事（ない場合null）
const newer = posts.contents[current_index - 1] ?? null;
// 1つ古い記事（ない場合null）
const older = posts.contents[current_index + 1] ?? null;
---

<Layout
  content={{
    title: blog.title,
    description:
      blog.content.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g, "").length > 100
        ? blog.content
            .replace(/<("[^"]*"|'[^']*'|[^'">])*>/g, "")
            .slice(0, 101) + "..."
        : blog.content.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g, ""),
    heroImage:
      blog.eyecatch &&
      // `${blog.eyecatch.url}?fm=webp&fit=crop&crop=top&w=720&h=360`,
      blog.eyecatch.url,
    pubDate: new Date(blog.publishedAt).toLocaleString("ja-JP", {
      timeZone: "Asia/Tokyo",
    }),
    updatedDate: new Date(blog.updatedAt).toLocaleString("ja-JP", {
      timeZone: "Asia/Tokyo",
    }),
    categoryId: blog.category.id ?? "",
    categoryName: blog.category.name ?? "",
    lcp: (typeof lcp !== 'undefined'| lcp !== "" | lcp !== null) ? lcp : null,
  }}
  newer={newer}
  older={older}
>
  {
    table_of_content.length > 0 && (
      <div class="table_of_content_wrapper">
        <h4 class="table_of_content_title">目次</h4>
        <ul class="table_of_content_lists">
          {table_of_content.map((item) => (
            <li class={`table_of_content_list ${item.name}`}>
              <a href={`#${item.id}`}>{item.text}</a>
            </li>
          ))}
        </ul>
      </div>
    )
  }
  <main set:html={content} />
  <div id="wavebox" class="wavebox">
    <p>もしこの投稿が「いいね！」と思ったら↓のWaveboxから拍手をください</p>
    <a
      href="https://wavebox.me/wave/9yprnt1ii7tatpb8/"
      target="_blank"
      rel="noopener noreferrer"
      ><img
        width="150"
        height="40"
        alt="wavebox logo"
        src="https://images.microcms-assets.io/assets/8026aec5aaba42abb48e90c99ce4967d/7ae13f9a38be4db3b40ac2166607885a/logo_symbol_black.png?fm=webp&w=150"
      /></a
    >
  </div>
</Layout>
