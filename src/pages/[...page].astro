---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Sidebar from '../components/Sidebar.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../config';

//microCMS呼び出し
import { getBlogs } from "../library/microcms";
// const { contents: posts } = await getBlogs({ fields: ["id", "title", "publishedAt","eyecatch","category"] });

export async function getStaticPaths({ paginate }:any) {
  const { contents: posts } = await getBlogs({ fields: ["id", "title", "publishedAt","content","eyecatch","category"],orders:'-publishedAt'});
  // 記事の配列から、1ページに10個づつ入るようにページを生成する
  return paginate(posts, { pageSize: 10 });
}
// ページ分割されたデータは、すべて "page" プロパティとして渡される
const { page } = Astro.props;
---

<!DOCTYPE html>
<html lang="ja">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			ul {
				list-style-type: none;
				padding: unset;
			}
			ul li {
				display: flex;
			}
			ul li time {
				flex: 0 0 130px;
				font-style: italic;
				color: #595959;
			}
			ul li a:visited {
				color: #8e32dc;
			}

			div a div {
				margin:1em auto;
			}
		</style>
	</head>
	<body>
		<Header />
		<main class="main">
			<Sidebar></Sidebar>
			<section class="contents">
				<div>
					{
						page.data.map((post:any) => (
						// posts.map((post) => (
							<div class="post">
								{post.eyecatch && <a href={`/posts/${post.id}`} aria-label="記事へ進む"><img width={720} height={360} src={`${post.eyecatch.url}?fit=crop&w=720&h=360`} alt="" /></a>}
								<span class="published_time_span">
									<time datetime={post.publishedAt}>
										{new Date(post.publishedAt).toLocaleString('ja-JP',{ timeZone: 'Asia/Tokyo' })}
									</time>
								</span>
								{post.category && <span class="category"><a href={`/category/${post.category.id}`}>{post.category.name}</a></span>}							
								<a href={`/posts/${post.id}`}>
									<h2>{post.title}</h2>
									<div class="description">{post.content.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'').length > 100 ? post.content.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'').slice(0,101) + '...' : post.content.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'')}</div>
								</a>
							</div>
						))
					}
				</div>
				{page.url.prev ? <a href={page.url.prev}>Previous</a> : page.url.current === '' ? null : <a href="/">Previous</a>}
				{page.url.next ? <a href={page.url.next}>Next</a> : null}
			</section>
		</main>
		<Footer />
	</body>
</html>
