---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../../config';

//microCMS呼び出し
import { getBlogs, getCategories, getCategoryDetail } from "../../../library/microcms";

export async function getStaticPaths({paginate}:any) {
  const { contents: categories } = await getCategories({ fields: ["id"] });
  const allTags = categories.map((category) => category.id);
  //console.log(allTags);
  const { contents: posts } = await getBlogs({ fields: ["id", "title", "publishedAt", "description", "eyecatch","category"] });
  // console.log(posts);
  // すべてのタグに対して、paginate() の結果を返す。
  // 必ず、`{params: {tag}} を `paginate()` に渡してください。
  // そうすれば、Astroは結果がどのタググループに対するものか分かります。
  return allTags.map((categoryId) => {
    const filteredPosts = posts.filter((post) => post.category !== null && post.category.id === categoryId);
    return paginate(filteredPosts, {
      params: { categoryId },
      pageSize: 10
    });
  });
}
const { page } = Astro.props;
const params = Astro.params;
const category = await getCategoryDetail(params.categoryId as string);

---

<!DOCTYPE html>
<html lang="ja">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			ul {
				list-style-type: none;
				padding: unset;
			}
			ul li {
				display: flex;
			}
			ul li time {
				flex: 0 0 130px;
				font-style: italic;
				color: #595959;
			}
			ul li a:visited {
				color: #8e32dc;
			}

			div a div {
				margin:1em auto;
			}
			div a div time {
				flex: 0 0 130px;
				font-style: italic;
				color: #595959;
			}
			div a:visited {
				color: #8e32dc;
			}

			.published_time_span {
				font-size: 12px;
			}

			.category {
				font-size: 13px;
				margin:auto 0.5em;
			}

			div a div h2 {
				margin-top: 0;
			}
		</style>
	</head>
	<body>
		<Header />
		<main>			
			<section>
				<h1>{category.name}</h1>
				<div>
					{
						page.data.map((post:any) => (
						// posts.map((post) => (
							<div>
								{post.eyecatch && <a href={`/posts/${post.id}`}><img width={720} height={360} src={post.eyecatch.url} alt="" /></a>}
								<span class="published_time_span">
									<time datetime={post.publishedAt}>
										{new Date(post.publishedAt).toLocaleString('ja-JP')}
									</time>
								</span>
								{post.category && <span class="category"><a href={`/category/${post.category.id}`}>{post.category.name}</a></span>}							
								<a href={`/posts/${post.id}`}>
									<h2>{post.title}</h2>
									<p>{post.description}</p>
								</a>
							</div>
						))
					}
				</div>
				{page.url.prev ? <a href={page.url.prev}>Previous</a> : null}
				{page.url.next ? <a href={page.url.next}>Next</a> : null}
			</section>
		</main>
		<Footer />
	</body>
</html>
